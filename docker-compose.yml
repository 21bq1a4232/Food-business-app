services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: food_business_db
    environment:
      POSTGRES_DB: food_business
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - food_business_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: food_business_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - food_business_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: food_business_backend
    environment:
      - DEBUG=False
      - SECRET_KEY=your-secret-key-change-in-production
      - DB_NAME=food_business
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/1
      - RAZORPAY_KEY_ID=your-razorpay-key
      - RAZORPAY_KEY_SECRET=your-razorpay-secret
    volumes:
      - backend_static:/app/staticfiles
      - backend_media:/app/media
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - food_business_network
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 120 food_business.wsgi:application"

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: food_business_frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - food_business_network
    restart: unless-stopped

  # Celery Worker (for background tasks)
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: food_business_celery_worker
    environment:
      - DEBUG=False
      - SECRET_KEY=your-secret-key-change-in-production
      - DB_NAME=food_business
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - backend_static:/app/staticfiles
      - backend_media:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - food_business_network
    restart: unless-stopped
    command: celery -A food_business worker --loglevel=info

  # Celery Beat (for scheduled tasks)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: food_business_celery_beat
    environment:
      - DEBUG=False
      - SECRET_KEY=your-secret-key-change-in-production
      - DB_NAME=food_business
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - backend_static:/app/staticfiles
      - backend_media:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - food_business_network
    restart: unless-stopped
    command: celery -A food_business beat --loglevel=info

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: food_business_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - food_business_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  backend_static:
  backend_media:

networks:
  food_business_network:
    driver: bridge 